package jacob.simpson.tinyscript;

import java.io.*;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import jacob.simpson.tinyscript.grammar.TinyScriptLexer;
import jacob.simpson.tinyscript.grammar.TinyScriptParser;

import java.io.File;
import java.io.FileInputStream;

public class Main {

    public static void main(String... args) throws IOException {
        if (args.length == 0) {
            printHelp();
            System.exit(0);
        }

        File programFile = new File(args[0]);
        if (!programFile.exists()) {
            System.err.format("The script file '%s' does not exist.\n", programFile.getAbsolutePath());
            System.exit(1);
        }
        if (!programFile.canRead()) {
            System.err.format("The script file '%s' is not readable.\n", programFile.getAbsolutePath());
            System.exit(1);
        }

        // The process of compiling TinyScript to an executable format is
        // basically a two step process. First, lex and parse the input file.
        // Second, transform it to byte code and load it into memory.

        // Step 1: Lex and parse the input file.  The lexer and parser are
        // generated by ANTLR. To see the grammar, have a look at the .g4 file.
        // If you find some of the TinyScript* classes are missing or out of
        // date, that is because those classes are generated from the .g4 file
        // from the ANTR tool.
        ANTLRInputStream input = new ANTLRInputStream(new FileInputStream(programFile));
        TinyScriptLexer lexer = new TinyScriptLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        TinyScriptParser parser = new TinyScriptParser(tokens);

        // The .program() method is the root node of the grammar specified in
        // the .g4 file.
        ParseTree tree = parser.program();

    }

    private static void printHelp() {
        System.out.println("<program file>");
    }
}
